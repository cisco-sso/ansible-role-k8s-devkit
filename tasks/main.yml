---
# tasks file for ansible-role-k8s-devkit

- name: awake | Install script file.
  tags:
    - awake
  copy:
    src: awake
    dest: "{{ awake_install_path }}"
    mode: 0755

- name: docker | Adding existing user '{{ kdk_user }}' to group docker.
  tags:
    - docker
  user:
    name: "{{ kdk_user }}"
    groups: docker
    append: yes

- name: golang | Chown GOPATH to kdk_user.
  tags:
    - golang
  file:
    path: /go
    state: directory
    owner: "{{ kdk_user }}"
    recurse: true
    follow: false

- name: easyrsa | Detect existence.
  tags:
    - easyrsa
  stat: "path={{ easyrsa_install_dir }}"
  register: easyrsa_detect
  changed_when: False

- name: easyrsa | Download release archive.
  tags:
    - easyrsa
  get_url:
    url: "{{ easyrsa_release_url }}"
    dest: /tmp/easyrsa.tgz
    checksum: "{{ easyrsa_release_checksum_type }}:{{ easyrsa_release_checksum }}"
    mode: 0644
  when: easyrsa_detect.stat.exists == False 

- name: easyrsa | Install release.
  tags:
    - easyrsa
  unarchive:
    src: /tmp/easyrsa.tgz
    dest: "{{ easyrsa_install_dir | dirname }}"
    owner: root
    group: root
    remote_src: yes
  when: easyrsa_detect.stat.exists == False 

- name: easyrsa | Symlink to current release.
  tags:
    - easyrsa
  file:
    src: "{{ easyrsa_install_dir }}"
    dest: "{{ easyrsa_install_dir_symlink }}"
    owner: root
    group: root
    state: link

- name: easyrsa | Clean release archive.
  tags:
    - easyrsa
  file:
    path: /tmp/easyrsa.tgz
    state: absent

- name: dep | Install binary release.
  tags:
    - dep
    - golang
  get_url:
    url: "{{ dep_release_url_base }}/{{ dep_version }}/{{ dep_release_url_suffix }}"
    dest: "{{ dep_install_path }}"
    checksum: "{{ dep_release_checksum_type }}:{{ dep_release_checksum }}"
    mode: 0755

- name: git | Manage repos.
  tags:
    - git
    - golang
  become: True
  become_user: "{{ kdk_user }}"
  git:
    repo: "{{ item.repo }}"
    dest: "{{ item.dest | default(omit) }}"
    clone: "{{ item.clone | default(true) }}"
    recursive: "{{ item.recursive | default(omit) }}"
    update: "{{ item.update | bool | default(true) }}"
    version: "{{ item.version | default(omit) }}"
    accept_hostkey: "{{ git_repos_accept_hostkey | default(false) }}"
  with_items: "{{ git_repos }}"

- name: git | Go get install repo-based packages.
  tags:
    - git
    - golang
  become: True
  become_user: "{{ kdk_user }}"
  shell: |-
    #!/bin/bash
    set -euo pipefail
    pushd {{ item.dest }}
    export PATH="/usr/local/bin:${PATH}"
    dep ensure
    {{ go_bin }} get -f -u {{ item.name }}
  register: go_get_from_repo_result
  with_items: "{{ git_repos }}"
  when: item.go_get
  changed_when: True  # Always, because 'go get' doesn't give us any actionable feedback.

- name: git | Custom install.
  tags:
    - git
  become: True
  shell: |-
    #!/bin/bash
    set -euo pipefail
    pushd {{ item.dest }}
    export PATH="/usr/local/bin:${PATH}"
    {{ item.script_body }}
  register: go_get_from_repo_result
  with_items: "{{ git_repos }}"
  when: item.script
  changed_when: True  # Always, because 'go get' doesn't give us any actionable feedback.

- name: gomplate | Install binary release.
  tags:
    - golang
    - gomplate
  get_url:
    url: "{{ gomplate_release_url_base }}/{{ gomplate_version }}/{{ gomplate_release_url_suffix }}"
    dest: "{{ gomplate_install_path }}"
    checksum: "{{ gomplate_release_checksum_type }}:{{ gomplate_release_checksum }}"
    mode: 0755

- name: helm | Create plugins directory.
  tags:
    - helm
  become: True
  become_user: "{{ kdk_user }}"
  file:
    path: "{{ kdk_user_home }}/.helm/plugins"
    state: directory
    mode: 0755

- name: helm | Install plugins.
  tags:
    - helm
  become: True
  become_user: "{{ kdk_user }}"
  shell: |-
    #!/bin/bash
    set -euo pipefail
    helm="{{ kubernetes_helm_bin_dir }}/helm"
    HELM_PLUGIN_NAME={{ item.name }}
    HELM_PLUGIN_VERSION={{ item.version }}
    HELM_PLUGIN_URL={{ item.url }}
    
    echo "## If helm plugin is installed with correct version, exit 0."
    ${helm} plugin list \
    | cut -f1-2 \
    | grep "^${HELM_PLUGIN_NAME}[[:space:]]*${HELM_PLUGIN_VERSION}[[:space:]]*$" \
    && echo "NOT_CHANGED" \
    && exit 0
    
    echo "## If helm plugin is installed with incorrect version, uninstall and reinstall."
    ${helm} plugin list \
    | cut -f1-2 \
    | grep "^${HELM_PLUGIN_NAME}[[:space:]]*" \
    && ${helm} plugin remove ${HELM_PLUGIN_NAME}
    
    echo "## Install correct version of helm plugin."
    ${helm} plugin install ${HELM_PLUGIN_URL} --version ${HELM_PLUGIN_VERSION}
    echo "CHANGED"
  register: helm_install_plugins_result
  with_items: "{{ helm_plugins }}"
  changed_when: not (helm_install_plugins_result.stdout | search('NOT_CHANGED'))

- name: jq | Install binary release.
  tags:
    - jq
  get_url:
    url: "{{ jq_release_url_base }}{{ jq_version }}/{{ jq_release_url_suffix }}"
    dest: "{{ jq_install_path }}"
    checksum: "{{ jq_release_checksum_type }}:{{ jq_release_checksum }}"
    mode: 0755

- name: kops | Install binary release.
  tags:
    - kops
  get_url:
    url: "{{ kops_release_url_base }}/{{ kops_version }}/{{ kops_release_url_suffix }}"
    dest: "{{ kops_install_path }}"
    checksum: "{{ kops_release_checksum_type }}:{{ kops_release_checksum }}"
    mode: 0755

- name: kubectl | Install binary release.
  tags:
    - kubectl
  get_url:
    url: "{{ kubectl_release_url_base }}/{{ kubectl_version }}/{{ kubectl_release_url_suffix }}"
    dest: "{{ kubectl_install_path }}"
    checksum: "{{ kubectl_release_checksum_type }}:{{ kubectl_release_checksum }}"
    mode: 0755

- name: minikube | Install binary release.
  tags:
    - minikube
  get_url:
    url: "{{ minikube_release_url_base }}/{{ minikube_version }}/{{ minikube_release_url_suffix }}"
    dest: "{{ minikube_install_path }}"
    checksum: "{{ minikube_release_checksum_type }}:{{ minikube_release_checksum }}"
    mode: u=rwxs,g=rwx,o=r

- name: mc | Get latest sha256 checksum.
  tags:
    - mc
    - minio
  uri:
    url: "{{ mc_release_checksum_url }}"
    return_content: yes
  register: mc_release_checksum
  changed_when: False

- name: mc | Install latest binary release.
  tags:
    - mc
    - minio
  get_url:
    url: "{{ mc_release_url }}"
    dest: "{{ mc_install_path }}"
    checksum: "{{ mc_release_checksum_type }}:{{ mc_release_checksum.content.split(' ')[0] }}"
    mode: 0755

- name: direnv | Install binary release.
  tags:
    - direnv
  get_url:
    url: "{{ direnv_release_url_base }}/{{ direnv_version }}/{{ direnv_release_url_suffix }}"
    dest: "{{ direnv_install_path }}"
    checksum: "{{ direnv_release_checksum_type }}:{{ direnv_release_checksum }}"
    mode: 0755

- name: direnv | Install bash hooks
  become: True
  become_user: "{{ item.username }}"
  blockinfile:
    path: "{{ item.home }}/.bashrc"
    marker: "# {mark} direnv: ANSIBLE MANAGED BLOCK"
    block: |-
      # direnv: enable only if interactive shell and direnv is installed
      if [[ -n ${PS1:-''} ]] && which direnv > /dev/null; then
          eval "$(direnv hook bash)"
      fi
  with_items:
  - username: root
    home: /root
  - username: "{{ kdk_user }}"
    home: "/home/{{ kdk_user }}"

- name: screen/ssh-agent | Install bash hooks
  become: True
  become_user: "{{ item.username }}"
  blockinfile:
    path: "{{ item.home }}/.bashrc"
    marker: "# {mark} screen/ssh-agent: ANSIBLE MANAGED BLOCK"
    block: |-
      # screen/ssh-agent: enable re-attaching screen sessions with ssh-agent support
      #   Only if this is an interactive session that is also an ssh session
      if [[ -n ${PS1:-''} && -n ${SSH_TTY:-''} ]] ; then
          # if there is an SSH_AUTH_SOCK set, and it is a socket, and it is not a link
          if [[ -n ${SSH_AUTH_SOCK:-''} && -S "$SSH_AUTH_SOCK" && ! -L "$SSH_AUTH_SOCK" ]]; then
              # then create the link
              rm -f ~/.ssh_auth_sock
              ln -sf $SSH_AUTH_SOCK ~/.ssh_auth_sock
              export SSH_AUTH_SOCK=~/.ssh_auth_sock
          fi
      fi
  with_items:
  - username: root
    home: /root
  - username: "{{ kdk_user }}"
    home: "/home/{{ kdk_user }}"

- name: paths | Install bash paths
  tags:
    - paths
  become: True
  become_user: "{{ item.username }}"
  blockinfile:
    path: "{{ item.home }}/.bashrc"
    marker: "# {mark} paths: ANSIBLE MANAGED BLOCK"
    block: |-
      export PATH=$PATH:/usr/local/bin/easyrsa:/usr/local/bin
  with_items:
  - username: root
    home: /root
  - username: "{{ kdk_user }}"
    home: "/home/{{ kdk_user }}"

- name: terraform | Detect existence.
  tags:
    - terraform
  stat: "path={{ terraform_install_path }}"
  register: terraform_detect
  changed_when: False

- name: terraform | Detect version.
  tags:
    - terraform
  shell: "{{ terraform_install_path }} version || echo none"
  register: terraform_version_detected
  changed_when: False

- name: terraform | Download binary release archive.
  tags:
    - terraform
  get_url:
    url: "{{ terraform_release_url_base }}/{{ terraform_version }}/{{ terraform_release_url_suffix }}"
    dest: "{{ terraform_install_path }}.zip"
    checksum: "{{ terraform_release_checksum_type }}:{{ terraform_release_checksum }}"
    mode: 0644
  when: not (terraform_version_detected.stdout | match('.*Terraform v' + terraform_version + '.*'))

- name: terraform | Install binary release.
  tags:
    - terraform
  unarchive:
    src: "{{ terraform_install_path }}.zip"
    dest: "{{ terraform_install_path | dirname }}"
    mode: 0755
    remote_src: yes
  when: not (terraform_version_detected.stdout | match('.*Terraform v' + terraform_version + '.*'))

- name: terraform | Clean binary release archive.
  tags:
    - terraform
  file:
    path: "{{ terraform_install_path }}.zip"
    state: absent

- name: pip2 | Install packages.
  tags:
    - pip2
    - python
    - python2
  pip:
    name: "{{ item.name }}"
    version: "{{ item.version | default(omit) }}"
    executable: pip2.7
  with_items: "{{ pip2_packages }}"

- name: pip3 | Install packages.
  tags:
    - pip3
    - python
    - python3
  pip:
    name: "{{ item.name }}"
    version: "{{ item.version | default(omit) }}"
    executable: pip3.6
  with_items: "{{ pip3_packages }}"

- name: Add repository
  tags:
    - yum
  yum_repository:
    name: thelocehiliosan-yadm
    description: Copr repo for yadm owned by thelocehiliosan
    baseurl: https://copr-be.cloud.fedoraproject.org/results/thelocehiliosan/yadm/epel-7-$basearch/
    skip_if_unavailable: yes
    gpgcheck: yes
    gpgkey: https://copr-be.cloud.fedoraproject.org/results/thelocehiliosan/yadm/pubkey.gpg
    repo_gpgcheck: no
    enabled: yes

- name: yum | Install packages.
  tags:
    - yum
  yum:
    name: "{{ item.name }}"
  with_items: "{{ yum_packages }}"
