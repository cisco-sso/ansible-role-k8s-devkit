---
# tasks file for ansible-role-pdk

- name: helm | Create plugins directory.
  file:
    path: "{{ pdk_user_home }}/.helm/plugins"
    state: directory
    mode: 0755

- name: helm | Install plugins.
  shell: |-
    #!/bin/bash
    set -euo pipefail
    helm="{{ kubernetes_helm_bin_dir }}/helm"
    HELM_PLUGIN_NAME={{ item.name }}
    HELM_PLUGIN_VERSION={{ item.version }}
    HELM_PLUGIN_URL={{ item.url }}
    
    echo "## If helm plugin is installed with correct version, exit 0."
    ${helm} plugin list \
    | cut -f1-2 \
    | grep "^${HELM_PLUGIN_NAME}[[:space:]]*${HELM_PLUGIN_VERSION}[[:space:]]*$" \
    && echo "NOT_CHANGED" \
    && exit 0
    
    echo "## If helm plugin is installed with incorrect version, uninstall and reinstall."
    ${helm} plugin list \
    | cut -f1-2 \
    | grep "^${HELM_PLUGIN_NAME}[[:space:]]*" \
    && ${helm} plugin remove ${HELM_PLUGIN_NAME}
    
    echo "## Install correct version of helm plugin."
    ${helm} plugin install ${HELM_PLUGIN_URL} --version ${HELM_PLUGIN_VERSION}
    echo "CHANGED"
  register: helm_install_plugins_result
  become: true
  become_user: "{{ pdk_user }}"
  with_items: "{{ helm_plugins }}"
  changed_when: not (helm_install_plugins_result.stdout | search('NOT_CHANGED'))

- name: jq | Install binary release.
  get_url:
    url: "{{ jq_release_url_base }}{{ jq_version }}/{{ jq_release_url_suffix }}"
    dest: "{{ jq_install_path }}"
    checksum: "{{ jq_release_checksum_type }}:{{ jq_release_checksum }}"
    mode: 0755

- name: kops | Install binary release.
  get_url:
    url: "{{ kops_release_url_base }}/{{ kops_version }}/{{ kops_release_url_suffix }}"
    dest: "{{ kops_install_path }}"
    checksum: "{{ kops_release_checksum_type }}:{{ kops_release_checksum }}"
    mode: 0755

- name: kubectl | Install binary release.
  get_url:
    url: "{{ kubectl_release_url_base }}/{{ kubectl_version }}/{{ kubectl_release_url_suffix }}"
    dest: "{{ kubectl_install_path }}"
    checksum: "{{ kubectl_release_checksum_type }}:{{ kubectl_release_checksum }}"
    mode: 0755

- name: minikube | Install binary release.
  get_url:
    url: "{{ minikube_release_url_base }}/{{ minikube_version }}/{{ minikube_release_url_suffix }}"
    dest: "{{ minikube_install_path }}"
    checksum: "{{ minikube_release_checksum_type }}:{{ minikube_release_checksum }}"
    mode: 0755

- name: mc | Get latest sha256 checksum.
  uri:
    url: "{{ mc_release_checksum_url }}"
    return_content: yes
  register: mc_release_checksum
  changed_when: False

- name: mc | Install latest binary release.
  get_url:
    url: "{{ mc_release_url }}"
    dest: "{{ mc_install_path }}"
    checksum: "{{ mc_release_checksum_type }}:{{ mc_release_checksum.content.split(' ')[0] }}"
    mode: 0755

- name: direnv | Install binary release.
  get_url:
    url: "{{ direnv_release_url_base }}/{{ direnv_version }}/{{ direnv_release_url_suffix }}"
    dest: "{{ direnv_install_path }}"
    checksum: "{{ direnv_release_checksum_type }}:{{ direnv_release_checksum }}"
    mode: 0755

- name: terraform | Detect existence.
  stat: "path={{ terraform_install_path }}"
  register: terraform_detect
  changed_when: False

- name: terraform | Detect version.
  shell: "{{ terraform_install_path }} version || echo none"
  register: terraform_version_detected
  changed_when: False

- name: terraform | Download binary release archive.
  get_url:
    url: "{{ terraform_release_url_base }}/{{ terraform_version }}/{{ terraform_release_url_suffix }}"
    dest: "{{ terraform_install_path }}.zip"
    checksum: "{{ terraform_release_checksum_type }}:{{ terraform_release_checksum }}"
    mode: 0644
  when: not (terraform_version_detected.stdout | match('.*Terraform v' + terraform_version + '.*'))

- name: terraform | Install binary release.
  unarchive:
    src: "{{ terraform_install_path }}.zip"
    dest: "{{ terraform_install_path | dirname }}"
    mode: 0755
    remote_src: yes
  when: not (terraform_version_detected.stdout | match('.*Terraform v' + terraform_version + '.*'))

- name: terraform | Clean binary release archive.
  file:
    path: "{{ terraform_install_path }}.zip"
    state: absent

- name: pip2 | Install packages.
  pip:
    name: "{{ item.name }}"
    version: "{{ item.version | default(omit) }}"
    executable: pip2.7
  with_items: "{{ pip2_packages }}"

- name: pip3 | Install packages.
  pip:
    name: "{{ item.name }}"
    version: "{{ item.version | default(omit) }}"
    executable: pip3.6
  with_items: "{{ pip3_packages }}"

- name: yum | Install packages.
  yum:
    name: "{{ item.name }}"
  with_items: "{{ yum_packages }}"

#- name: git | Manage repos.
#  git:
#    repo: "{{ item.repo }}"
#    dest: "{{ item.dest | default(omit) }}"
#    clone: "{{ item.clone | default(true) }}"
#    recursive: "{{ item.recursive | default(omit) }}"
#    update: "{{ item.update | bool | default(true) }}"
#    version: "{{ item.version | default(omit) }}"
#    accept_hostkey: "{{ git_repos_accept_hostkey | default(false) }}"
#  with_items: "{{ git_repos }}"
